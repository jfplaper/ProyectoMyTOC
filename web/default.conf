server {
    # Puerto de escucha del servidor (el que está abierto y atiende peticiones)
    listen 80;
    server_name MYTOC; #tu_dominio_o_IP publica

    # Redirige todas las peticiones HTTP a HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name MYTOC;#tu_dominio_o_IP publica
    # Configuración SSL con las rutas a las claves y los certificados
    ssl_certificate /etc/nginx/certs/selfsigned.crt;
    ssl_certificate_key /etc/nginx/certs/selfsigned.key;
    # Opciones adicionales de seguridad
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers HIGH:!aNULL:!MD5;

    # Ruta definida para cada servicio
    location / {
        # Redirige las solicitudes al servicio frontend (llamado así en el docker-composer) en su puerto 5173
        proxy_pass http://frontend:5173;

        # PERSISTENCIA DE LA INFORMACIÓN ORIGINAL DEL CLIENTE
        # Pasa el nombre del host o dominio del cliente
        proxy_set_header Host $host;

        # Pasa la ip original del cliente
        proxy_set_header X-Real-IP $remote_addr;

        # Pasa las ip del cliente y las de los proxies intermedios si existen
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Envía información sobre si la solicitud es http o https
        proxy_set_header X-Forwarded-Proto $scheme;

        # Soporte para websockets y SSE para mantener la conexión abierta
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";

        # Soporte para tiempos de conexión y respuesta lentos
        proxy_connect_timeout 60s; #tiempo máximo de conexión
        proxy_send_timeout 60s; #tiempo máximo para enviar la solicitud
        proxy_read_timeout 60s; #tiempo máximo para recibir la respuesta
    }

    # Siguiente servicio, llamado backend en el docker-composer, en su puerto 8000
    location /api/ {
        proxy_pass http://api:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Siguiente servicio, llamado phpmyadmin en el docker-composer, en su puerto 8080:80
    location /admin_mytoc/ {
        proxy_pass http://admin_mytoc:80/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}
